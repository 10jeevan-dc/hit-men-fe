{"version":3,"sources":["redux/store.js","redux/actions/index.js","redux/reducers/user.reducer.js","redux/reducers/gameControl.reducer.js","redux/reducers/index.js","components/Header/Header.component.js","utils/request.utils.js","components/StartPage/shared/TextInputButton/TextInputButton.component.js","components/StartPage/shared/LoaderButton/LoaderButton.component.js","components/StartPage/StartPage.component.js","components/GamePage/shared/HitButton.component.js","components/GamePage/GamePage.component.js","components/LeaderBoard/LeaderBoardPage.component.js","App.js","serviceWorker.js","index.js"],"names":["initStore","reducer","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","RESET_USER_DETAILS","SET_USER_ALLOCATION_DETAILS","RESET_GAME_STATE","ALLOW_GAME_PLAY","CHANGE_GAME_STATE","USER_DETAILS_SET","SET_USER_SCORE","SET_REMAINING_TIME","SET_LEADERBOARD_DATA","SET_TEAM_SCORE_DATA","setUserAllocationDetails","createAction","changeGameState","userDetailsSet","setUserScore","setRemainingTime","setLeaderboardData","setTeamScoreData","initialState","sessionName","userName","selfTeam","opponentTeam","gamePlayTimeInSeconds","score","gameState","isUserAllowedToPlay","isUserDetailsSet","leaderBoardData","teamScoreData","combinedReducers","combineReducers","user","state","arguments","length","undefined","action","type","Object","objectSpread","payload","game","Header","react_default","a","createElement","className","Component","baseUrl","getRequest","endPoint","fetch","concat","method","headers","Accept","Content-Type","postRequest","requestBody","body","JSON","stringify","patchRequest","params","isEmpty","TextInputButton","_this$props","this","props","isInputFieldActive","inputFieldValue","updateInputFieldValue","activateInputField","onClick","value","onChange","placeholder","defaultProps","LoaderButton","clickEnabled","checked","styles","loader_button_container","id","disabled","htmlFor","StartPage","alowPlay","_this","setState","event","target","onContinue","_this$state","setUserDetails","toggleUserDetailsSet","progressGame","then","response","json","jsonResponse","eligibilityResponse","jsonEligibilityResponse","get","_this$state2","TextInputButton_component","LoaderButton_component","connect","_ref","dispatch","HitButton","hitHandler","GamePage","componentDidMount","timer","setInterval","tickHandler","onTimeComplete","_this$props2","updateUserScore","currentScore","has","clearInterval","_this$props3","updateUserTime","timerValue","_this$props4","HitButton_component","LeaderBoardPage","updateLeaderBoard","updateTeamScores","scoreResponseStream","scoreResponse","forOwn","key","map","members","member","push","playerName","username","team","selfScore","getLeaderboardTableRow","getTeamScoreTableRows","teamScores","teamScoreRows","teamName","_this2","playerData","App","getStartPage","Header_component","StartPage_component","getGamePage","GamePage_component","getLeaderBoardPage","LeaderBoardPage_component","screenID","Boolean","location","hostname","match","ReactDOM","render","es","store","Store","Reducers","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qXAOeA,EALG,SAACC,GAEjB,OADcC,YAAYD,EAASE,OAAOC,8BAAgCD,OAAOC,gDCCtEC,EAAqB,qBACrBC,EAA8B,8BAC9BC,EAAmB,mBACnBC,EAAkB,kBAClBC,EAAoB,oBACpBC,EAAmB,mBACnBC,EAAiB,iBACjBC,EAAqB,qBACrBC,EAAuB,uBACvBC,EAAsB,sBAKtBC,EAA2BC,YAAaV,GAGxCW,GAFmBD,YAAaX,GAChBW,YAAaR,GACXQ,YAAaP,IAE/BS,GADiBF,YAAaT,GACbS,YAAaN,IAC9BS,EAAeH,YAAaL,GAC5BS,EAAmBJ,YAAaJ,GAChCS,EAAqBL,YAAaH,GAClCS,EAAmBN,YAAaF,GCtBhCS,EAAe,CAC1BC,YAAa,GACbC,SAAU,GACVC,SAAU,GACVC,aAAc,GACdC,sBAAuB,EACvBC,MAAO,GCLF,IAAMN,EAAe,CAC1BO,UAAW,EACXC,qBAAqB,EACrBC,kBAAkB,EAClBC,gBAAiB,GACjBC,cAAe,ICNjB,IAKeC,EALUC,YAAgB,CACvCC,KFQa,WAAmD,IAA9BC,EAA8BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBhB,EAAcmB,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAChE,OAAQC,EAAOC,MACb,KAAKrC,EACH,OAAOsC,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAUI,EAAOI,SAC/B,KAAKnC,EACH,OAAOiC,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBT,MAAOa,EAAOI,UACnC,KAAKlC,EACH,OAAOgC,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBV,sBAAuBc,EAAOI,UACnD,KAAKzC,EACH,OAAOkB,EACT,QACE,OAAOe,IElBXS,KDOa,WAA0D,IAA9BT,EAA8BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBhB,EAAcmB,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACvE,OAAQC,EAAOC,MACb,KAAKnC,EACH,OAAOoC,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBP,oBAAqBW,EAAOI,UACjD,KAAKrC,EACH,OAAOmC,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBR,UAAWY,EAAOI,UACvC,KAAKpC,EACH,OAAOkC,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBN,iBAAkBU,EAAOI,UAC9C,KAAKjC,EACH,OAAO+B,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBL,gBAAiBS,EAAOI,UAC7C,KAAKhC,EACH,OAAO8B,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBJ,cAAeQ,EAAOI,UAC3C,KAAKvC,EACH,OAAOgB,EACT,QACE,OAAOe,iDEhBEU,0LARX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,oBAHeC,qBCDfC,EAAU,wBAEHC,EAAa,SAAAC,GAAQ,OAAIC,MAAK,GAAAC,OAAIJ,EAAJ,KAAAI,OAAeF,GAAY,CACpEG,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,eAAgB,uBAIPC,EAAc,SAACP,EAAUQ,GAAX,OAA2BP,MAAK,GAAAC,OAAIJ,EAAJ,KAAAI,OAAeF,GAAY,CACpFG,OAAQ,OACRC,QAAS,CACPC,OAAQ,mBACRC,eAAgB,oBAElBG,KAAMC,KAAKC,UAAUH,MAGVI,EAAe,SAACZ,EAAUa,GACrC,OAAKC,kBAAQD,GAUNZ,MAAK,GAAAC,OAAIJ,EAAJ,KAAAI,OAAeF,GAAY,CACrCG,OAAQ,QACRC,QAAS,CACPC,OAAQ,mBACRC,eAAgB,sBAbXL,MAAK,GAAAC,OAAIJ,EAAJ,KAAAI,OAAeF,GAAY,CACrCG,OAAQ,QACRC,QAAS,CACPC,OAAQ,mBACRC,eAAgB,oBAElBG,KAAMC,KAAKC,UAAUE,MCzBrBE,0LACK,IAAAC,EAMHC,KAAKC,MAJPC,EAFKH,EAELG,mBACAC,EAHKJ,EAGLI,gBACAC,EAJKL,EAILK,sBACAC,EALKN,EAKLM,mBAEF,OACE7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,UACEC,UAAWuB,EAAqB,mBAAqB,iBACrDI,QAASD,GAFX,SAMA7B,EAAAC,EAAAC,cAAA,OAAKC,UAAWuB,EAAqB,uBAAyB,UAC5D1B,EAAAC,EAAAC,cAAA,SACER,KAAK,OACLqC,MAAOJ,EACPK,SAAUJ,EACVK,YAAY,yBACZ9B,UAAU,gCAtBQC,cAqC9BkB,EAAgBY,aAAe,CAC7BR,oBAAoB,EACpBC,gBAAiB,GACjBC,sBAAuB,aACvBC,mBAAoB,cAGPP,yBC5CTa,mLACK,IAAAZ,EACoCC,KAAKC,MAAxCK,EADDP,EACCO,QAASM,EADVb,EACUa,aAAcC,EADxBd,EACwBc,QAC/B,OACErC,EAAAC,EAAAC,cAAA,OAAKC,UAAWmC,IAAOC,yBACrBvC,EAAAC,EAAAC,cAAA,SAAOsC,GAAG,aAAa9C,KAAK,WAAWoC,QAASA,EAASW,UAAWL,GAAgBC,IACpFrC,EAAAC,EAAAC,cAAA,SAAOwC,QAAQ,uBANItC,aAkB3B+B,EAAaD,aAAe,CAC1BJ,QAAS,aACTM,cAAc,EACdC,SAAS,GAGIF,QClBTQ,oNACJtD,MAAM,CACJqC,oBAAoB,EACpBC,gBAAiB,GACjBiB,UAAU,KAGZf,mBAAqB,WACnBgB,EAAKC,SAAS,CACZpB,oBAAoB,OAIxBE,sBAAwB,SAACmB,GACvB,IAAMpB,EAAkBoB,EAAMC,OAAOjB,MACrCc,EAAKC,SAAS,CACZnB,kBACAiB,WAAYjB,OAIhBsB,WAAa,WAAM,IAAAC,EAC+BL,EAAKxD,MAA7CqC,EADSwB,EACTxB,mBAAoBC,EADXuB,EACWvB,gBADXJ,EAIbsB,EAAKpB,MADP0B,EAHe5B,EAGf4B,eAAgBC,EAHD7B,EAGC6B,qBAAsBC,EAHvB9B,EAGuB8B,aAEpC3B,GACFZ,EAAY,gBAAiB,CAC3BtC,SAAUmD,IACT2B,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAAQF,KAAK,SAACG,GACzCN,EAAeM,GACfL,GAAqB,GACrB9C,EAAU,SAAAG,OAAUkB,IAAmB2B,KAAK,SAAAI,GAAmB,OAAIA,EAAoBF,SAAQF,KAAK,SAACK,GAC/FC,cAAID,EAAyB,YAAY,IAC3CN,EAAa,gFAOd,IAAAQ,EACmDrC,KAAKnC,MAAvDqC,EADDmC,EACCnC,mBAAoBC,EADrBkC,EACqBlC,gBAAiBiB,EADtCiB,EACsCjB,SACrC7D,EAAqByC,KAAKC,MAA1B1C,iBACR,OACEiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAC4D,EAAD,CACEpC,mBAAoBA,EACpBC,gBAAiBA,EACjBC,sBAAuBJ,KAAKI,sBAC5BC,mBAAoBL,KAAKK,qBAGzBH,GACA1B,EAAAC,EAAAC,cAAC6D,EAAD,CACEjC,QAASN,KAAKyB,WACdb,aAAcQ,EACdP,QAAStD,YAzDGqB,cA0ExBuC,EAAUT,aAAe,CACvBiB,eAAgB,aAChBpE,kBAAkB,EAClBqE,qBAAsB,aACtBC,aAAc,cAGhB,IAWeW,cAXS,SAAAC,GAAA,IAAGnE,EAAHmE,EAAGnE,KAAMV,EAAT6E,EAAS7E,KAAT,MAAqB,CAC3CL,iBAAkBe,EAAKf,iBACvBP,SAAUY,EAAKZ,WAGU,SAAA0F,GAAQ,MAAK,CACtCf,eAAgB,SAAAtD,GAAO,OAAIqE,EAASpG,EAAyB+B,KAC7DuD,qBAAsB,SAAAvD,GAAO,OAAIqE,EAASjG,EAAe4B,KACzDwD,aAAc,SAAAxD,GAAO,OAAIqE,EAASlG,EAAgB6B,OAGrCmE,CAA6CrB,GClGtDwB,0LACK,IACCC,EAAe5C,KAAKC,MAApB2C,WACR,OACEpE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAa2B,QAASsC,GAAxC,gBALgBhE,cAexB+D,EAAUjC,aAAe,CACvBkC,WAAY,cAGCD,QCdTE,oNACJC,kBAAoB,WAClBzB,EAAK0B,MAAQC,YAAY3B,EAAK4B,YAAa,QAG7CC,eAAiB,WAAM,IAAAnD,EACcsB,EAAKpB,MAAhC4B,EADa9B,EACb8B,aAAc7E,EADD+C,EACC/C,SACtB2C,EAAa,OAAQ,CAAE3C,aACvB6E,EAAa,MAGfe,WAAa,WAAM,IAAAO,EAGb9B,EAAKpB,MADPjD,EAFemG,EAEfnG,SAAUoG,EAFKD,EAELC,gBAAiBC,EAFZF,EAEYE,aAAcxB,EAF1BsB,EAE0BtB,aAE3ClC,EAAY,OAAAV,OAAQjC,IAAY8E,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAAQF,KAAK,SAACG,GAClEqB,cAAIrB,EAAc,SACpBmB,EAAgBhB,cAAIH,EAAc,QAASoB,GAAgB,GAClDC,cAAIrB,EAAc,cAC3BtC,EAAa,OAAQ,CAAE3C,aACvBuG,cAAclC,EAAK0B,OACnBlB,EAAa,SAKnBoB,YAAc,WAAM,IAAAO,EACqBnC,EAAKpB,MAApCwD,EADUD,EACVC,eAAgBC,EADNF,EACME,WACL,IAAfA,GACFH,cAAclC,EAAK0B,OACnB1B,EAAK6B,kBAELO,EAAgBC,EAAa,4EAIxB,IAAAC,EAC8B3D,KAAKC,MAAlCoD,EADDM,EACCN,aAAcK,EADfC,EACeD,WACtB,OACElF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAACkF,EAAD,CAAWhB,WAAY5C,KAAK4C,aAC5BpE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAf,cAEG,IACA0E,GAEH7E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,iBAEEH,EAAAC,EAAAC,cAAA,WACC,IACAgF,EACA,IALH,aA9Ce9E,cAoEvBiE,EAASnC,aAAe,CACtB2C,aAAc,EACdK,WAAY,GACZN,gBAAiB,cAGnB,IAYeZ,eAZS,SAAAC,GAAA,IAAG7E,EAAH6E,EAAG7E,KAAH,MAAe,CACrCyF,aAAczF,EAAKR,MACnBsG,WAAa9F,EAAKT,sBAClBH,SAAUY,EAAKZ,WAGU,SAAA0F,GAAQ,MAAK,CACtCU,gBAAiB,SAAA/E,GAAO,OAAKqE,EAAShG,EAAa2B,KACnDoF,eAAgB,SAAApF,GAAO,OAAKqE,EAAS/F,EAAiB0B,KACtDwD,aAAc,SAAAxD,GAAO,OAAIqE,EAASlG,EAAgB6B,OAGrCmE,CAA6CK,GCrFtDgB,qNACJf,kBAAoB,WAAM,IAAA/C,EAGpBsB,EAAKpB,MADPjD,EAFsB+C,EAEtB/C,SAAUoG,EAFYrD,EAEZqD,gBAAiBU,EAFL/D,EAEK+D,kBAAmBC,EAFxBhE,EAEwBgE,iBAE1CvG,EAAkB,GAClBC,EAAgB,GACtBqB,EAAU,SAAAG,OAAUjC,IAAY8E,KAAK,SAAAkC,GAAmB,OAAIA,EAAoBhC,SAAQF,KAAK,SAACmC,GAC5FC,iBAAO9B,cAAI6B,EAAe,QAAS,IAAK,SAAC1D,EAAO4D,GACvB,kBAAX5D,GAAuB+C,cAAI/C,EAAO,WAC5C6D,cAAI7D,EAAM8D,QAAS,SAACC,GAClB9G,EAAgB+G,KAAK,CACnBC,WAAYF,EAAOG,SACnBrH,MAAOkH,EAAOlH,MACdsH,KAAMJ,EAAOI,SAGjBjH,EAAc0G,GAAO5D,EAAMnD,SAG/B,IAAMuH,EAAYvC,cAAI6B,EAAe,YAAa,GAClDb,EAAgBuB,GAChBb,EAAkBtG,GAClBuG,EAAiBtG,QAIrBmH,uBAAyB,SAACJ,EAAYpH,EAAOsH,GAApB,OACvBlG,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBACZH,EAAAC,EAAAC,cAAA,UAAK8F,GACLhG,EAAAC,EAAAC,cAAA,UAAKtB,GACLoB,EAAAC,EAAAC,cAAA,UAAKgG,OAITG,sBAAwB,SAACC,GACvB,IAAMC,EAAgB,GAStB,OARAb,iBAAOY,EAAY,SAAC1H,EAAO4H,GACzBD,EAAcR,KACZ/F,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBACZH,EAAAC,EAAAC,cAAA,UAAKsG,GACLxG,EAAAC,EAAAC,cAAA,UAAKtB,OAIJ2H,2EAGA,IAAAE,EAAAjF,KAAAmD,EAC+CnD,KAAKC,MAAnDzC,EADD2F,EACC3F,gBAAiB6F,EADlBF,EACkBE,aAAcyB,EADhC3B,EACgC2B,WACvC,OACEtG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAAf,cAEG,IACA0E,GAEH7E,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAAf,eACAH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,sBACfH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBACZH,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,qBAGJF,EAAAC,EAAAC,cAAA,aACGsB,KAAK6E,sBAAsBC,KAGhCtG,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAAf,eACAH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,sBACfH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBACZH,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,qBAGJF,EAAAC,EAAAC,cAAA,aACGlB,EAAgB4G,IAAI,SAAAc,GAAU,OAAID,EAAKL,uBAAuBM,EAAWV,WAAYU,EAAW9H,MAAO8H,EAAWR,kBAjFjG9F,cAmG9BiF,GAAgBnD,aAAe,CAC7BlD,gBAAiB,GACjB6F,aAAc,EACdyB,WAAY,IAGd,IAaetC,eAbS,SAAAC,GAAA,IAAG7E,EAAH6E,EAAG7E,KAAMU,EAATmE,EAASnE,KAAT,MAAqB,CAC3C+E,aAAczF,EAAKR,MACnBJ,SAAUY,EAAKZ,SACfQ,gBAAiBc,EAAKd,gBACtBsH,WAAYxG,EAAKb,gBAGQ,SAAAiF,GAAQ,MAAK,CACtCoB,kBAAmB,SAAAzF,GAAO,OAAIqE,EAAS9F,EAAmByB,KAC1D+E,gBAAiB,SAAA/E,GAAO,OAAKqE,EAAShG,EAAa2B,KACnD0F,iBAAkB,SAAA1F,GAAO,OAAKqE,EAAS7F,EAAiBwB,OAG3CmE,CAA6CqB,ICvHtDsB,qNACJC,aAAe,kBACb5G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC2G,EAAD,MACA7G,EAAAC,EAAAC,cAAC4G,EAAD,UAIJC,YAAc,kBACZ/G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC2G,EAAD,MACA7G,EAAAC,EAAAC,cAAC8G,GAAD,UAIJC,mBAAqB,kBACnBjH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC2G,EAAD,MACA7G,EAAAC,EAAAC,cAACgH,GAAD,gFAMF,OADqB1F,KAAKC,MAAlB0F,UAEN,KAAK,EAAG,OAAO3F,KAAKuF,cACpB,KAAK,EAAG,OAAOvF,KAAKyF,qBACpB,QAAS,OAAOzF,KAAKoF,uBA3BTxG,cAwClBuG,GAAIzE,aAAe,CACjBiF,SAAU,GAGGnD,mBAZS,SAAAC,GAAA,MAAe,CACrCkD,SADsBlD,EAAGnE,KACVjB,YAWFmF,CAAyB2C,ICzCpBS,QACW,cAA7BlK,OAAOmK,SAASC,UAEkB,UAA7BpK,OAAOmK,SAASC,UAEhBpK,OAAOmK,SAASC,SAASC,MAC1B,2DCTNC,IAASC,OAAOzH,EAAAC,EAAAC,cAACwH,EAAA,EAAD,CAAUC,MAAOC,EAAMC,IAAW7H,EAAAC,EAAAC,cAAC4H,GAAD,OAAoBC,SAASC,eAAe,SDwHxF,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7E,KAAK,SAAC8E,GAClCA,EAAaC","file":"static/js/main.06ab0613.chunk.js","sourcesContent":["import { createStore } from 'redux';\n\nconst initStore = (reducer) => {\n  const store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n  return store;\n};\n\nexport default initStore;\n","import { createAction } from 'redux-actions';\n\n// Action constants\n\nexport const RESET_USER_DETAILS = 'RESET_USER_DETAILS';\nexport const SET_USER_ALLOCATION_DETAILS = 'SET_USER_ALLOCATION_DETAILS';\nexport const RESET_GAME_STATE = 'RESET_GAME_STATE';\nexport const ALLOW_GAME_PLAY = 'ALLOW_GAME_PLAY';\nexport const CHANGE_GAME_STATE = 'CHANGE_GAME_STATE';\nexport const USER_DETAILS_SET = 'USER_DETAILS_SET';\nexport const SET_USER_SCORE = 'SET_USER_SCORE';\nexport const SET_REMAINING_TIME = 'SET_REMAINING_TIME';\nexport const SET_LEADERBOARD_DATA = 'SET_LEADERBOARD_DATA';\nexport const SET_TEAM_SCORE_DATA = 'SET_TEAM_SCORE_DATA';\n\n\n// Actions\n\nexport const setUserAllocationDetails = createAction(SET_USER_ALLOCATION_DETAILS);\nexport const resetUserDetails = createAction(RESET_USER_DETAILS);\nexport const allowGamePlay = createAction(ALLOW_GAME_PLAY);\nexport const changeGameState = createAction(CHANGE_GAME_STATE);\nexport const resetGameState = createAction(RESET_GAME_STATE);\nexport const userDetailsSet = createAction(USER_DETAILS_SET);\nexport const setUserScore = createAction(SET_USER_SCORE);\nexport const setRemainingTime = createAction(SET_REMAINING_TIME);\nexport const setLeaderboardData = createAction(SET_LEADERBOARD_DATA);\nexport const setTeamScoreData = createAction(SET_TEAM_SCORE_DATA);\n","\nimport {\n  RESET_USER_DETAILS, SET_USER_ALLOCATION_DETAILS, SET_USER_SCORE, SET_REMAINING_TIME,\n} from '../actions';\n\nexport const initialState = {\n  sessionName: '',\n  userName: '',\n  selfTeam: '',\n  opponentTeam: '',\n  gamePlayTimeInSeconds: 0,\n  score: 0,\n};\n\nexport default function userReducer(state = initialState, action) {\n  switch (action.type) {\n    case SET_USER_ALLOCATION_DETAILS:\n      return { ...state, ...action.payload };\n    case SET_USER_SCORE:\n      return { ...state, score: action.payload };\n    case SET_REMAINING_TIME:\n      return { ...state, gamePlayTimeInSeconds: action.payload };\n    case RESET_USER_DETAILS:\n      return initialState;\n    default:\n      return state;\n  }\n}\n","\nimport {\n  RESET_GAME_STATE, ALLOW_GAME_PLAY, CHANGE_GAME_STATE, USER_DETAILS_SET,\n  SET_LEADERBOARD_DATA, SET_TEAM_SCORE_DATA,\n} from '../actions';\n\nexport const initialState = {\n  gameState: 1,\n  isUserAllowedToPlay: false,\n  isUserDetailsSet: false,\n  leaderBoardData: [],\n  teamScoreData: {},\n};\n\nexport default function gameControlReducer(state = initialState, action) {\n  switch (action.type) {\n    case ALLOW_GAME_PLAY:\n      return { ...state, isUserAllowedToPlay: action.payload };\n    case CHANGE_GAME_STATE:\n      return { ...state, gameState: action.payload };\n    case USER_DETAILS_SET:\n      return { ...state, isUserDetailsSet: action.payload };\n    case SET_LEADERBOARD_DATA:\n      return { ...state, leaderBoardData: action.payload };\n    case SET_TEAM_SCORE_DATA:\n      return { ...state, teamScoreData: action.payload };\n    case RESET_GAME_STATE:\n      return initialState;\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport user from './user.reducer';\nimport game from './gameControl.reducer';\n\nconst combinedReducers = combineReducers({\n  user,\n  game,\n});\n\nexport default combinedReducers;\n","import React, { Component } from 'react';\nimport './Header.css';\n\nclass Header extends Component {\n  render() {\n    return (\n      <div className=\"header-text\">\n        EXP-CI/CD\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import { isEmpty } from 'lodash';\n\nconst baseUrl = 'http://localhost:8080';\n\nexport const getRequest = endPoint => fetch(`${baseUrl}/${endPoint}`, {\n  method: 'GET',\n  headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n  },\n});\n\nexport const postRequest = (endPoint, requestBody) => fetch(`${baseUrl}/${endPoint}`, {\n  method: 'POST',\n  headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify(requestBody),\n});\n\nexport const patchRequest = (endPoint, params) => {\n  if (!isEmpty(params)) {\n    return fetch(`${baseUrl}/${endPoint}`, {\n      method: 'PATCH',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(params),\n    });\n  }\n  return fetch(`${baseUrl}/${endPoint}`, {\n    method: 'PATCH',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n  });\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './TextInputButton.css';\n\nclass TextInputButton extends Component {\n  render() {\n    const {\n      isInputFieldActive,\n      inputFieldValue,\n      updateInputFieldValue,\n      activateInputField,\n    } = this.props;\n    return (\n      <div className=\"button_with_text\">\n        <button\n          className={isInputFieldActive ? 'button_invisible' : 'button_visible'}\n          onClick={activateInputField}\n        >\n            Start\n        </button>\n        <div className={isInputFieldActive ? 'slider slider-active' : 'slider'}>\n          <input\n            type=\"text\"\n            value={inputFieldValue}\n            onChange={updateInputFieldValue}\n            placeholder=\"Please enter your name\"\n            className=\"slider_input_field\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nTextInputButton.propTypes = {\n  isInputFieldActive: PropTypes.bool,\n  inputFieldValue: PropTypes.string,\n  updateInputFieldValue: PropTypes.func,\n  activateInputField: PropTypes.func,\n};\n\nTextInputButton.defaultProps = {\n  isInputFieldActive: false,\n  inputFieldValue: '',\n  updateInputFieldValue: () => {},\n  activateInputField: () => {},\n};\n\nexport default TextInputButton;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './LoaderButton.scss';\n\nclass LoaderButton extends Component {\n  render() {\n    const { onClick, clickEnabled, checked } = this.props;\n    return (\n      <div className={styles.loader_button_container}>\n        <input id=\"mycheckbox\" type=\"checkbox\" onClick={onClick} disabled={!clickEnabled || checked} />\n        <label htmlFor=\"mycheckbox\" />\n      </div>\n    );\n  }\n}\n\nLoaderButton.propTypes = {\n  onClick: PropTypes.func,\n  clickEnabled: PropTypes.bool,\n  checked: PropTypes.bool,\n};\n\nLoaderButton.defaultProps = {\n  onClick: () => {},\n  clickEnabled: false,\n  checked: false,\n};\n\nexport default LoaderButton;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { get } from 'lodash';\nimport PropTypes from 'prop-types';\nimport { getRequest, postRequest } from '../../utils/request.utils';\nimport { setUserAllocationDetails, userDetailsSet, changeGameState } from '../../redux/actions';\nimport TextInputButton from './shared/TextInputButton/TextInputButton.component';\nimport LoaderButton from './shared/LoaderButton/LoaderButton.component';\nimport './StartPage.css';\n\nclass StartPage extends Component {\n  state={\n    isInputFieldActive: false,\n    inputFieldValue: '',\n    alowPlay: false,\n  }\n\n  activateInputField = () => {\n    this.setState({\n      isInputFieldActive: true,\n    });\n  }\n\n  updateInputFieldValue = (event) => {\n    const inputFieldValue = event.target.value;\n    this.setState({\n      inputFieldValue,\n      alowPlay: !!inputFieldValue,\n    });\n  }\n\n  onContinue = () => {\n    const { isInputFieldActive, inputFieldValue } = this.state;\n    const {\n      setUserDetails, toggleUserDetailsSet, progressGame,\n    } = this.props;\n    if (isInputFieldActive) {\n      postRequest('allocate/user', {\n        userName: inputFieldValue,\n      }).then(response => response.json()).then((jsonResponse) => {\n        setUserDetails(jsonResponse);\n        toggleUserDetailsSet(true);\n        getRequest(`start/${inputFieldValue}`).then(eligibilityResponse => eligibilityResponse.json()).then((jsonEligibilityResponse) => {\n          if (get(jsonEligibilityResponse, 'canStart', false)) {\n            progressGame(2);\n          }\n        });\n      });\n    }\n  }\n\n  render() {\n    const { isInputFieldActive, inputFieldValue, alowPlay } = this.state;\n    const { isUserDetailsSet } = this.props;\n    return (\n      <div className=\"start_page_container\">\n        <TextInputButton\n          isInputFieldActive={isInputFieldActive}\n          inputFieldValue={inputFieldValue}\n          updateInputFieldValue={this.updateInputFieldValue}\n          activateInputField={this.activateInputField}\n        />\n        {\n          isInputFieldActive && (\n          <LoaderButton\n            onClick={this.onContinue}\n            clickEnabled={alowPlay}\n            checked={isUserDetailsSet}\n          />\n          )\n        }\n      </div>\n    );\n  }\n}\n\nStartPage.propTypes = {\n  setUserDetails: PropTypes.func,\n  isUserDetailsSet: PropTypes.bool,\n  toggleUserDetailsSet: PropTypes.func,\n  userName: PropTypes.string.isRequired,\n  progressGame: PropTypes.func,\n};\n\nStartPage.defaultProps = {\n  setUserDetails: () => {},\n  isUserDetailsSet: false,\n  toggleUserDetailsSet: () => {},\n  progressGame: () => {},\n};\n\nconst mapStateToProps = ({ game, user }) => ({\n  isUserDetailsSet: game.isUserDetailsSet,\n  userName: user.userName,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setUserDetails: payload => dispatch(setUserAllocationDetails(payload)),\n  toggleUserDetailsSet: payload => dispatch(userDetailsSet(payload)),\n  progressGame: payload => dispatch(changeGameState(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StartPage);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './HitButton.css';\n\nclass HitButton extends Component {\n  render() {\n    const { hitHandler } = this.props;\n    return (\n      <div>\n        <button className=\"hit_button\" onClick={hitHandler}>Hit!</button>\n      </div>\n    );\n  }\n}\n\nHitButton.propTypes = {\n  hitHandler: PropTypes.func,\n};\n\nHitButton.defaultProps = {\n  hitHandler: () => {},\n};\n\nexport default HitButton;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { has, get } from 'lodash';\nimport { patchRequest } from '../../utils/request.utils';\nimport { setUserScore, setRemainingTime, changeGameState } from '../../redux/actions';\nimport HitButton from './shared/HitButton.component';\nimport './GamePage.css';\n\nclass GamePage extends Component {\n  componentDidMount = () => {\n    this.timer = setInterval(this.tickHandler, 1000);\n  }\n\n  onTimeComplete = () => {\n    const { progressGame, userName } = this.props;\n    patchRequest('stop', { userName });\n    progressGame(3);\n  }\n\n  hitHandler = () => {\n    const {\n      userName, updateUserScore, currentScore, progressGame,\n    } = this.props;\n    patchRequest(`hit/${userName}`).then(response => response.json()).then((jsonResponse) => {\n      if (has(jsonResponse, 'score')) {\n        updateUserScore(get(jsonResponse, 'score', currentScore) + 1);\n      } else if (has(jsonResponse, 'gameOver')) {\n        patchRequest('stop', { userName });\n        clearInterval(this.timer);\n        progressGame(3);\n      }\n    });\n  }\n\n  tickHandler = () => {\n    const { updateUserTime, timerValue } = this.props;\n    if (timerValue === 0) {\n      clearInterval(this.timer);\n      this.onTimeComplete();\n    } else {\n      updateUserTime((timerValue - 1));\n    }\n  }\n\n  render() {\n    const { currentScore, timerValue } = this.props;\n    return (\n      <div className=\"game_page_container\">\n        <HitButton hitHandler={this.hitHandler} />\n        <div className=\"current_score\">\n          Your score:\n          {' '}\n          {currentScore}\n        </div>\n        <div className=\"timer\">\n          Time remaining\n          <br />\n          {' '}\n          {timerValue}\n          {' '}\n          s\n        </div>\n      </div>\n    );\n  }\n}\n\nGamePage.propTypes = {\n  currentScore: PropTypes.number,\n  timerValue: PropTypes.number,\n  userName: PropTypes.string.isRequired,\n  updateUserScore: PropTypes.func,\n  updateUserTime: PropTypes.func.isRequired,\n  progressGame: PropTypes.func.isRequired,\n};\n\nGamePage.defaultProps = {\n  currentScore: 0,\n  timerValue: 30,\n  updateUserScore: () => {},\n};\n\nconst mapStateToProps = ({ user }) => ({\n  currentScore: user.score,\n  timerValue: (user.gamePlayTimeInSeconds),\n  userName: user.userName,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateUserScore: payload => (dispatch(setUserScore(payload))),\n  updateUserTime: payload => (dispatch(setRemainingTime(payload))),\n  progressGame: payload => dispatch(changeGameState(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GamePage);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  get, forOwn, has, map,\n} from 'lodash';\nimport { getRequest } from '../../utils/request.utils';\nimport { setLeaderboardData, setUserScore, setTeamScoreData } from '../../redux/actions';\nimport './LeaderBoardPage.css';\n\nclass LeaderBoardPage extends Component {\n  componentDidMount = () => {\n    const {\n      userName, updateUserScore, updateLeaderBoard, updateTeamScores,\n    } = this.props;\n    const leaderBoardData = [];\n    const teamScoreData = {};\n    getRequest(`score/${userName}`).then(scoreResponseStream => scoreResponseStream.json()).then((scoreResponse) => {\n      forOwn(get(scoreResponse, 'score', {}), (value, key) => {\n        if (typeof (value) === 'object' && has(value, 'score')) {\n          map(value.members, (member) => {\n            leaderBoardData.push({\n              playerName: member.username,\n              score: member.score,\n              team: member.team,\n            });\n          });\n          teamScoreData[key] = value.score;\n        }\n      });\n      const selfScore = get(scoreResponse, 'selfScore', 0);\n      updateUserScore(selfScore);\n      updateLeaderBoard(leaderBoardData);\n      updateTeamScores(teamScoreData);\n    });\n  }\n\n  getLeaderboardTableRow = (playerName, score, team) => (\n    <tr className=\"custom_table_row\">\n      <td>{playerName}</td>\n      <td>{score}</td>\n      <td>{team}</td>\n    </tr>\n  )\n\n  getTeamScoreTableRows = (teamScores) => {\n    const teamScoreRows = [];\n    forOwn(teamScores, (score, teamName) => {\n      teamScoreRows.push(\n        <tr className=\"custom_table_row\">\n          <td>{teamName}</td>\n          <td>{score}</td>\n        </tr>,\n      );\n    });\n    return teamScoreRows;\n  };\n\n  render() {\n    const { leaderBoardData, currentScore, teamScores } = this.props;\n    return (\n      <div>\n        <div className=\"current_score_container\">\n          Your score:\n          {' '}\n          {currentScore}\n        </div>\n        <br />\n        <div className=\"current_score_container\">Team Scores</div>\n        <table className=\"custom_table_style\">\n          <thead>\n            <tr className=\"custom_table_row\">\n              <th>Team</th>\n              <th>Score</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.getTeamScoreTableRows(teamScores)}\n          </tbody>\n        </table>\n        <br />\n        <div className=\"current_score_container\">Leaderboard</div>\n        <table className=\"custom_table_style\">\n          <thead>\n            <tr className=\"custom_table_row\">\n              <th>Player</th>\n              <th>Score</th>\n              <th>Team </th>\n            </tr>\n          </thead>\n          <tbody>\n            {leaderBoardData.map(playerData => this.getLeaderboardTableRow(playerData.playerName, playerData.score, playerData.team))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nLeaderBoardPage.propTypes = {\n  leaderBoardData: PropTypes.array,\n  currentScore: PropTypes.number,\n  userName: PropTypes.string.isRequired,\n  updateLeaderBoard: PropTypes.func.isRequired,\n  updateUserScore: PropTypes.func.isRequired,\n  updateTeamScores: PropTypes.func.isRequired,\n  teamScores: PropTypes.object,\n};\n\nLeaderBoardPage.defaultProps = {\n  leaderBoardData: [],\n  currentScore: 0,\n  teamScores: {},\n};\n\nconst mapStateToProps = ({ user, game }) => ({\n  currentScore: user.score,\n  userName: user.userName,\n  leaderBoardData: game.leaderBoardData,\n  teamScores: game.teamScoreData,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateLeaderBoard: payload => dispatch(setLeaderboardData(payload)),\n  updateUserScore: payload => (dispatch(setUserScore(payload))),\n  updateTeamScores: payload => (dispatch(setTeamScoreData(payload))),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LeaderBoardPage);\n","import React, { Component } from 'react';\nimport Proptypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Header from './components/Header/Header.component';\nimport StartPage from './components/StartPage/StartPage.component';\nimport GamePage from './components/GamePage/GamePage.component';\nimport LeaderBoardPage from './components/LeaderBoard/LeaderBoardPage.component';\nimport './App.css';\n\nclass App extends Component {\n  getStartPage = () => (\n    <div className=\"App\">\n      <Header />\n      <StartPage />\n    </div>\n  );\n\n  getGamePage = () => (\n    <div className=\"App\">\n      <Header />\n      <GamePage />\n    </div>\n  );\n\n  getLeaderBoardPage = () => (\n    <div className=\"App\">\n      <Header />\n      <LeaderBoardPage />\n    </div>\n  );\n\n  render() {\n    const { screenID } = this.props;\n    switch (screenID) {\n      case 2: return this.getGamePage();\n      case 3: return this.getLeaderBoardPage();\n      default: return this.getStartPage();\n    }\n  }\n}\n\nconst mapStateToProps = ({ game }) => ({\n  screenID: game.gameState,\n});\n\nApp.propTypes = {\n  screenID: Proptypes.number,\n};\n\nApp.defaultProps = {\n  screenID: 1,\n};\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport Store from './redux/store';\nimport Reducers from './redux/reducers';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Provider store={Store(Reducers)}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}